name: Publish Image
description: "Publishes the image to ECR"

inputs:
  ECR_REPOSITORY:
    description: 'ECR Repository name, generally this will be the service name'
    required: true
  IMAGE:
    description: 'Built Docker image to be uploaded'
    required: true
  TAG:
    description: 'Tag to give the image when uploaded to ECR'
    required: true
  ROLE_TO_ASSUME:
    description: 'OIDC Role to Assume'
    required: true
  FORCE_TAG:
    description: 'If set to "true", will overwrite TAG'
    required: false
    default: "false"

outputs:
  image:
    description: 'ECR Image'
    value: ${{ steps.publish-image.outputs.image }}

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: ${{ inputs.ROLE_TO_ASSUME }}
        aws-region: us-west-2
        mask-aws-account-id: 'no'

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Publish image
      id: publish-image
      if: ${{ inputs.FORCE_TAG != 'true' }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
        IMAGE: ${{ inputs.IMAGE }}
        TAG: ${{ inputs.TAG }}
        DOCKER_CLI_EXPERIMENTAL: enabled
      shell: bash
      run: |
        NEW_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$TAG
        if docker manifest inspect $NEW_IMAGE >/dev/null; then
          echo "Image already exists in ECR"
        else
          docker tag $IMAGE $NEW_IMAGE
          docker push $NEW_IMAGE
        fi
        echo "image=$NEW_IMAGE" >> $GITHUB_OUTPUT

    - name: Publish image and force tag
      id: publish-image-and-force-tag
      if: ${{ inputs.FORCE_TAG == 'true' }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
        IMAGE: ${{ inputs.IMAGE }}
        TAG: ${{ inputs.TAG }}
        DOCKER_CLI_EXPERIMENTAL: enabled
      shell: bash
      run: |
        NEW_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$TAG
        docker tag $IMAGE $NEW_IMAGE
        docker push $NEW_IMAGE
        echo "image=$NEW_IMAGE" >> $GITHUB_OUTPUT